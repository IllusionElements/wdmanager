type Deck {
  _id: ID!
  dragon: Dragon!
  probability: Float!
  fragments: Int!
}

interface Parents {
  _id: ID
  firstParent: Dragon
  secondParent: Dragon
  children: [Deck]!
}

interface DragonBreeding {
  _id: ID!
  distribution: Int!
  deck: String!
  parents: Parents!
}

type Breeding implements DragonBreeding {
  _id: ID!
  deck: String!
  parents: Parents!
  distribution: Int!
  eggNumber: Int!
  children: [Deck!]!
}

type DragonParents implements DragonBreeding {
  _id: ID!
  breedChance: Float!
  deck: String!
  distribution: Int!
  dragon: Dragon!
  dragonParents: [Dragon!]!
  parents: Parents!
}

input Parent {
  first: String!
  second: String!
}

input Child {
  id: ID!
}
input FilterParams {
  breed: Boolean
  divine: Boolean
}
type Query {
  dragons: [Dragon]
  tiers: [Tier]
  dragon(name: String!, filter: FilterParams): Dragon
  partialDragon(name: String!): [Dragon]!
  tier(key: String!): [Tier]
  dragonParents(child: Child!): [DragonParents!]!
  dragonChildren(parents: Parent!): [Breeding!]!
}
